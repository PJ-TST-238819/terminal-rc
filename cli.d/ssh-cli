#!/usr/bin/env bash

# SSH Config Management CLI Tool Launcher
# This script provides a convenient way to run the Python CLI tool

set -e  # Exit on error

# Get the directory of this script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Help function
show_help() {
    cat << EOF
SSH Config Management CLI Tool

USAGE:
    $0 [OPTIONS]

OPTIONS:
    --help, -h                          Show this help message
    --version, -v                       Show version information
    --debug                             Enable debug logging to console

INTERACTIVE MODE (default):
    $0                                  Run in interactive mode

HEADLESS MODE:
    $0 --list-instances                 List all EC2 instances
    $0 --show-ssh-hosts                 Show SSH hosts from config
    $0 --update-security-groups --force Update security groups with current IP
    $0 --update-ssh-config --instance-id INSTANCE_ID --ssh-host SSH_HOST
                                        Update SSH config with EC2 IP
    $0 --create-tunnel --ssh-host SSH_HOST [--local-port PORT] [--remote-port PORT]
                                        Create SSH tunnel

ADDITIONAL OPTIONS:
    --force                             Skip confirmation prompts (required for headless security updates)
    --quiet                             Suppress non-essential output
    --json-output                       Output results in JSON format
    --ip-address IP                     Use custom IP address

EXAMPLES:
    # Interactive mode
    $0

    # List instances with JSON output
    $0 --list-instances --json-output

    # Update security groups in automation
    $0 --update-security-groups --force

    # Update SSH config
    $0 --update-ssh-config --instance-id i-1234567890abcdef0 --ssh-host myserver

    # Create tunnel with custom ports
    $0 --create-tunnel --ssh-host myserver --local-port 8080 --remote-port 443

For more information, see the README.md file.
EOF
}

# Version function
show_version() {
    echo "SSH Config Management CLI Tool v0.1.0"
    echo "Python CLI tool for managing SSH configurations and AWS resources"
}

# Check if devbox is available
check_devbox() {
    if ! command -v devbox >/dev/null 2>&1; then
        print_error "devbox is not installed or not in PATH"
        print_info "Please install devbox from: https://www.jetify.com/devbox"
        exit 1
    fi
}

# Check if we're in a devbox environment
check_devbox_env() {
    if [[ -z "${DEVBOX_SHELL_ENABLED}" ]]; then
        print_warning "Not in a devbox shell environment"
        print_info "Attempting to run in devbox environment..."
        
        # Change to script directory and run in devbox
        cd "$SCRIPT_DIR"
        exec devbox run run "python src/cli_d/main.py $*"
    fi
}

# Main execution
main() {
    # Handle help and version flags first
    case "${1:-}" in
        --help|-h)
            show_help
            exit 0
            ;;
        --version|-v)
            show_version
            exit 0
            ;;
    esac

    # Check prerequisites
    check_devbox

    # Set debug environment if requested
    if [[ "$*" == *"--debug"* ]]; then
        export SSH_CLI_DEBUG=1
        print_info "Debug mode enabled"
        # Remove --debug from arguments as it's not a Python script argument
        set -- "${@/--debug/}"
    fi

    # Check if we're already in devbox environment
    check_devbox_env

    # If we reach here, we're in devbox environment
    print_info "Running SSH Config Management CLI..."
    
    # Change to script directory
    cd "$SCRIPT_DIR"
    
    # Execute the Python CLI with all passed arguments
    python src/cli_d/main.py "$@"
    exit_code=$?
    
    if [[ $exit_code -eq 0 ]]; then
        print_success "CLI completed successfully"
    else
        print_error "CLI exited with code $exit_code"
    fi
    
    exit $exit_code
}

# Run main function with all arguments
main "$@"
